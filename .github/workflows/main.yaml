name: Build and push Docker image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  should_build:
    runs-on: ubuntu-latest
    outputs:
      changed_services: ${{ steps.changes.outputs.changed_folders }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # checkout entire history to get changed files in push
      - name: Get changed folders
        id: changes
        run: |
          changed_folders=$(git diff --name-only --diff-filter=d ${{ github.event.before }} ${{ github.sha }} | \
            awk -F/ '{print $1}' | \
            uniq | \
            grep -Fxf <(find . -name Dockerfile -exec dirname {} \; | awk -F/ '{print $2}') | \
            xargs)
          echo "changed_folders=$changed_folders" >> $GITHUB_OUTPUT

  build:
    if: ${{ needs.should_build.outputs.changed_services != '' }}
    needs: should_build
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set environment variables
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "TAG=pr-${{ github.event.number }}" >> $GITHUB_ENV
          else
            echo "TAG=latest" >> $GITHUB_ENV
          fi
          echo "CONTAINER_REGISTRY=ghcr.io/${{ github.repository_owner }}/" >> $GITHUB_ENV
      - name: Build Docker image
        run: |
          for svc in ${{ needs.should_build.outputs.changed_services }}
          do
            docker compose build $svc
          done
      - name: Run Trivy image vulnerability scanner
        run: |
          for svc in ${{ needs.should_build.outputs.changed_services }}
          do
            img=$(docker compose config $svc | grep 'image:' | awk '{print $2}')
            docker run --rm -v trivy-cache:/root/.cache/ \
              -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image \
              --format "table" \
              --exit-code "1" \
              --ignore-unfixed \
              --vuln-type "os,library" \
              --severity CRITICAL,HIGH $img
          done
      - name: Push Docker image
        if: success() && github.event_name != 'pull_request'
        run: |
          for svc in ${{ needs.should_build.outputs.changed_services }}
          do
            docker compose push $svc
          done
